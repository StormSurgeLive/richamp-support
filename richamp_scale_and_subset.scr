#!/bin/bash
##SBATCH --constraint=hatteras
#SBATCH --job-name=uri_post
#SBATCH --output=uri_post.out
#SBATCH --error=uri_post.err
##SBATCH -p lowpri
#SBATCH -p uri-cpu
#SBATCH -c 1
#SBATCH --mem=8G
#SBATCH -t 01:00:00
##SBATCH --reservation=richamp
##SBATCH --partition=uri-richamp

targetScript="richamp_scale_and_subset.scr"
postinitScript="richamp_scale_and_subset_post_init.scr"
timeout=$((55*60))  # max time in seconds to wait for $postinitScript to finish
logfile=$1  # first parameter passed from richamp_scale_and_subset.sh`
echo "\"start\" : \"[$(date +'%Y-%h-%d-T%H:%M:%S%z')]\", \"jobid\" : \"${SLURM_JOBID}\"" > $targetScript.start # <-OVERWRITE
echo "[$(date +'%Y-%h-%d-T%H:%M:%S%z')] The batch job for $targetScript has started." >> $logfile

# load run.properties file into associative array and extract relevant properties
declare -A properties
RUNPROPERTIES=run.properties #PWD should be the SCENARIODIR
SCRIPTDIR=`sed -n 's/[ ^]*$//;s/path.scriptdir\s*:\s*//p' $RUNPROPERTIES`
source $SCRIPTDIR/properties.sh
loadProperties $RUNPROPERTIES
tc_forcing=${properties['forcing.tropicalcyclone']}
ENSTORM=${properties['asgs.enstorm']} # It's possible this is already set at the system level, but this doesn't hurt
forcing=${properties['forcing.backgroundmet']}
if [ $tc_forcing == "on" ]; then
   forcing=NHC
fi

# call Matlab scripts to trim depth data to RICHAMP region of interest and to generate a simple max inundation plot
indir=$PWD/  # Matlab script expects trailing slashes
outdir=$PWD/
postprocessdir=$SCRIPTDIR/output/richamp-support
nc_rough=$postprocessdir/NLCD_z0_RICHAMP_Reg_Grid.nc
module load matlab/r2021b
matlab -nodesktop -nodisplay -nosplash -r "addpath $postprocessdir, try, subset_fort63_richamp $indir $outdir, plot_max_inundation $indir $outdir $nc_rough $ENSTORM $forcing, catch me, fprintf('%s / %s\n',me.identifier,me.message), end, exit"

# move files to a consistent location for dashboarding team 
water_output=RICHAMP_fort63.nc
max_inund_plot=RICHAMP_max_inundation.png
output_dir=/work/pi_iginis_uri_edu/RICHAMP/pp_files/$ENSTORM
cp $water_output $max_inund_plot $RUNPROPERTIES $output_dir

# wait for the post_init script to finish; this allows that job to safely run alongside the forecast
job_string=$(cat $postinitScript.start)
search=jobid
left_job_string=${job_string%%$search*}
jobid_lit_idx=${#left_job_string}
jobid_idx=$(($jobid_lit_idx+10))
jobid=${job_string:$jobid_idx:7}
echo "Waiting for "$postinitScript" to finish, if necessary."
timeout $timeout tail --pid=$jobid -f /dev/null
if [[ $? == 124 ]]; then
   echo "Timeout occurred after waiting "$timeout" seconds for "$postinitScript" to finish. Check the logs for "$postinitScript" for problems. If all is working as intended, increase the timeout in "$targetScript" as needed."
else
   echo "Job complete."
fi

echo "\"finish\" : \"[$(date +'%Y-%h-%d-T%H:%M:%S%z')]\", \"jobid\" : \"${SLURM_JOBID}\"" > $targetScript.finish # <-OVERWRITE
echo "[$(date +'%Y-%h-%d-T%H:%M:%S%z')] The batch job for $targetScript has finished." >> $logfile

