#!/bin/bash
#SBATCH --constraint=hatteras
#SBATCH --job-name=uri_post
#SBATCH --output=uri_post.out
#SBATCH --error=uri_post.err
#SBATCH -p lowpri
#SBATCH -c 8
#SBATCH --mem=16G

# METGET_API_KEY and METGET_ENDPOINT environment variables must be set in order for
# get_metget_data.py to succeed

targetScript="richamp_scale_and_subset.scr"
echo "\"start\" : \"[$(date +'%Y-%h-%d-T%H:%M:%S%z')]\", \"jobid\" : \"${SLURM_JOBID}\"" > $targetScript.start # <-OVERWRITE
asgs_python=$1  # first parameter passed from richamp_scale_and_subset.sh

declare -A properties
RUNPROPERTIES=run.properties #PWD should be the SCENARIODIR
echo "Loading properties."
# get loadProperties function
SCRIPTDIR=`sed -n 's/[ ^]*$//;s/path.scriptdir\s*:\s*//p' $RUNPROPERTIES`
source $SCRIPTDIR/properties.sh
# load run.properties file into associative array
#loadProperties $RUNPROPERTIES
#echo "Finished loading properties."
# get tc forcing status from run.properties
#tc_forcing=${properties['forcing.tropicalcyclone']}

postprocessdir=$SCRIPTDIR/output/richamp-support

# if TROPICALCYCLONE=on, call URI parametric model and MetGet to get winds; attempt to blend them, but fall back to one or the other if necessary
#if [ $tc_forcing == "on" ]; then
#   # run URI parametric model
#   module load matlab/2020b
#   matlab -nodesktop -nodisplay -nosplash -r "addpath $postprocessdir, try, ASGS_fort22_to_PWM_inputs, catch me, fprintf('%s / %s\n',me.identifier,me.message), end, exit"
#   ln -s $postprocessdir/diag_parm.nml diag_parm.nml
#   $postprocessdir/windgfdl
#   # pull in metadata for MetGet call
#   wind_param=richamp.wnd
#   wind_inp=Wind_Inp.txt
#   ## get date range from run.properties
#   t_start_raw=${properties['RunStartTime']}
#   t_end_raw=${properties['RunEndTime']}
#   ## convert from yyyymmddHH to yyyy-mm-dd HH:MM
#   t_start=${t_start_raw:0:4}-${t_start_raw:4:2}-${t_start_raw:6:2}" "${t_start_raw:8:2}:${t_start_raw:10:2}00
#   t_end=${t_end_raw:0:4}-${t_end_raw:4:2}-${t_end_raw:6:2}" "${t_end_raw:8:2}:${t_end_raw:10:2}00
#   wind_back_filename=gfs_forecast
#   # call MetGet
#   $asgs_python $postprocessdir/get_metget_data.py --domain gfs 0.25 -72 41 -71 43 --start "$t_start" --end "$t_end" --timestep 3600 --output $wind_back_filename --multiple_forecasts --format owi-ascii --variable wind_pressure
#   wind_back=$wind_back_filename\_00.wnd
#   # determine wind format based on available files
#   if [[ ! -r "$wind_param" || ! -r "$wind_inp" ]] && [[ -r "$wind_back" ]]; then
#      wind_format="owi-ascii"
#   elif [[ -r "$wind_param" && -r "$wind_inp" ]] && [[ ! -r "$wind_back" ]]; then
#      wind_format="wnd"
#   elif [[ -r "$wind_param" && -r "$wind_inp" ]] && [[ -r "$wind_back" ]]; then
#      wind_format="blend"
#   fi
#fi

# call python script to trim wind, interpolate to RICHAMP region of interest, and scale based on z0
output=RICHAMP_wind
highres_roughness=$postprocessdir/NLCD_z0_RICHAMP_Reg_Grid.nc
wind_roughness=$postprocessdir/gfs-roughness.nc
z0_interp_name=$postprocessdir/z0_interp
threads=7 # $threads + wasync = the number in the header after -c
sigma=1000
radius=3000
#if [ $tc_forcing == "off" ]; then
   wind_back=fort.222
   wind_format="owi-ascii"
#fi
if [[ -r ${z0_interp_name}.pickle ]]; then
   z0_sv=''
else
   z0_sv='-z0sv'
fi
if [ $wind_format == "owi-ascii" ]; then
   $asgs_python $postprocessdir/scale_and_subset.py -o $output -hr $highres_roughness -w $wind_back -wfmt $wind_format -wr $wind_roughness -z0name $z0_interp_name $z0_sv -r $radius -sigma $sigma -t $threads -wasync
elif [ $wind_format == "wnd" ]; then
   $asgs_python $postprocessdir/scale_and_subset.py -o $output -hr $highres_roughness -w $wind_param -wfmt $wind_format -winp $wind_inp -z0name $z0_interp_name $z0_sv -r $radius -sigma $sigma -t $threads -wasync
elif [ $wind_format == "blend" ]; then
   $asgs_python $postprocessdir/scale_and_subset.py -o $output -hr $highres_roughness -w $wind_param -wfmt "wnd" -winp $wind_inp -wback $wind_back -wbackfmt "owi-ascii" -wbackr $wind_roughness -z0name $z0_interp_name $z0_sv -r $radius -sigma $sigma -t $threads -wasync
fi

# call matlab script to trim depth data to RICHAMP region of interest
indir=$PWD/  # Matlab script expects trailing slashes
outdir=$PWD/
module load matlab/2020b
matlab -nodesktop -nodisplay -nosplash -r "addpath $postprocessdir, try, subset_fort63_richamp $indir $outdir, catch me, fprintf('%s / %s\n',me.identifier,me.message), end, exit"
# check to see if matlab script finished successfully
if [[ $? == 0 ]]; then
   echo "\"finish\" : \"[$(date +'%Y-%h-%d-T%H:%M:%S%z')]\", \"jobid\" : \"${SLURM_JOBID}\"" > $targetScript.finish # <-OVERWRITE
else
   echo "\"error\" : \"[$(date +'%Y-%h-%d-T%H:%M:%S%z')]\", \"jobid\" : \"${SLURM_JOBID}\"" > $targetScript.error # <-OVERWRITE
fi
